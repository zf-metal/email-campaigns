<?php
/**
 * Created by IntelliJ IDEA.
 * User: afurgeri
 * Date: 15/12/2018
 * Time: 01:09
 */

namespace Test\Service;

use Doctrine\ORM\EntityManager;
use Zend\Test\PHPUnit\Controller\AbstractConsoleControllerTestCase;
use ZfMetal\EmailCampaigns\Constants;
use ZfMetal\EmailCampaigns\Entity\Campaign;
use ZfMetal\EmailCampaigns\Entity\CampaignRecord;
use ZfMetal\EmailCampaigns\Entity\CampaignRecordState;
use ZfMetal\EmailCampaigns\Entity\CampaignState;
use ZfMetal\EmailCampaigns\Entity\DistributionList;
use ZfMetal\EmailCampaigns\Entity\DistributionRecord;
use ZfMetal\EmailCampaigns\Entity\Template;
use ZfMetal\EmailCampaigns\Service\CampaignMailService;
use ZfMetal\EmailCampaigns\Service\CampaignRecordService;

class CampaignRecordServiceTest extends AbstractConsoleControllerTestCase
{
    public function setUp()
    {
        $this->setApplicationConfig(
            include __DIR__ . '/../config/application.config.php'
        );

        parent::setUp();
        $this->clearData();
    }

    public function tearDown()
    {
        $this->clearData();
        parent::tearDown(); // TODO: Change the autogenerated stub
    }

    /**
     * @return EntityManager
     */
    public function getEm()
    {
        return $this->getApplicationServiceLocator()->get(EntityManager::class);
    }

    /**
     * @return CampaignRepository
     */
    public function getCampaignRepository()
    {
        return $this->getEm()->getRepository(CampaignRecord::class);
    }


    public function clearData()
    {
        $this->getEm()->createQueryBuilder()->delete(Campaign::class, 'c')->getQuery()->execute();
        $this->getEm()->createQueryBuilder()->delete(DistributionList::class, 'c')->getQuery()->execute();
        $this->getEm()->createQueryBuilder()->delete(Template::class, 'c')->getQuery()->execute();
    }

    private function createNewCampaigns()
    {
        $distrubutionList = $this->createDistributionList();

        $template = $this->createTemplate();

        $c = $this->getCampaign($distrubutionList, $template);

        $this->createDistributionRecords($distrubutionList);

        return $c;
    }

    private function createNewCampaigns2()
    {
        $distrubutionList = $this->createDistributionList();

        $template = $this->createTemplate();

        $c = $this->getCampaign($distrubutionList, $template);

        $this->createDistributionRecords2($distrubutionList);

        return $c;
    }

    private function getActivatedCampaign()
    {
        $distrubutionList = $this->createDistributionList();

        $template = $this->createTemplate();

        $c = $this->getCampaign($distrubutionList, $template);

        $this->createDistributionRecords($distrubutionList);

        return $c;
    }

    /**
     * @param $distrubutionList
     * @param $i
     * @param $state
     * @return DistributionRecord
     */
    private function createDistributionRecord($distrubutionList, $i, $state)
    {
        $dr = new DistributionRecord();
        $dr->setDistributionList($distrubutionList)
            ->setFirstName("Name" . $i)
            ->setLastName("LastName" . $i)
            ->setEmail('test' . $i . '@email.com')
            ->setPhone('11223344')
            ->setCustomerField1('c1-' . $i)
            ->setCustomerField2('c2-' . $i)
            ->setCustomerField3('c3-' . $i)
            ->setSubscription($state);
        return $dr;
    }

    /**
     * @return DistributionList
     * @throws \Doctrine\ORM\ORMException
     * @throws \Doctrine\ORM\OptimisticLockException
     */
    private function createDistributionList()
    {
        $distrubutionList = new DistributionList();
        $distrubutionList->setId(1);
        $distrubutionList->setNameList("Test");
        $distrubutionList->setOriginName('Origin');
        $distrubutionList->setOriginEmail("origin@f.com");

        $this->getEm()->persist($distrubutionList);
        $this->getEm()->flush();
        return $distrubutionList;
    }

    /**
     * @return Template
     * @throws \Doctrine\ORM\ORMException
     * @throws \Doctrine\ORM\OptimisticLockException
     */
    private function createTemplate()
    {
        $template = new Template();
        $template->setId(1);
        $template->setFile('/tmp/file');
        $template->setName('Template');
        $this->getEm()->persist($template);
        $this->getEm()->flush();
        return $template;
    }

    /**
     * @param $campaign
     * @return array|object[]
     */
    private function getCampaignRecordsWithState($campaign, $state)
    {
        $campaignRecords = $this->getEm()->getRepository(CampaignRecord::class)->findBy([
            'campaign' => $campaign,
            'state' => $this->getEm()->getReference(CampaignRecordState::class, $state)
        ]);
        return $campaignRecords;
    }

    /**
     * @param $distrubutionList
     * @param $template
     * @return Campaign
     * @throws \Doctrine\ORM\ORMException
     * @throws \Doctrine\ORM\OptimisticLockException
     */
    private function getCampaign($distrubutionList, $template)
    {
        $c = new Campaign();
        $c->setId(1);
        $c->setState($this->getEm()->getReference(CampaignState::class, 1));
        $c->setDistributionList($distrubutionList);
        $c->setTemplate($template);
        $c->setCreateDate(new \DateTime());
        $this->getEm()->persist($c);
        $this->getEm()->flush();
        return $c;
    }

    /**
     * @param $distrubutionList
     * @throws \Doctrine\ORM\ORMException
     * @throws \Doctrine\ORM\OptimisticLockException
     */
    private function createDistributionRecords($distrubutionList)
    {
        for ($i = 0; $i < 10; $i++) {
            $dr = $this->createDistributionRecord($distrubutionList, $i, 1);
            $this->getEm()->persist($dr);
        }
        $this->getEm()->flush();
    }

    /**
     * @param $distrubutionList
     * @throws \Doctrine\ORM\ORMException
     * @throws \Doctrine\ORM\OptimisticLockException
     */
    private function createDistributionRecords2($distrubutionList)
    {
        for ($i = 0; $i < 10; $i++) {
            $state = ($i % 2 == 0) ? 0 : 1;
            $dr = $this->createDistributionRecord($distrubutionList, $i, $state);
            $this->getEm()->persist($dr);
        }
        $this->getEm()->flush();
    }

    public function testCreateInstanceOfService()
    {
        $campaignMailService = $this->createMock(CampaignMailService::class);
        $campaignMailService->method('with')->willReturn($campaignMailService);
        $campaignMailService->method('sendEmail')->willReturn(true);
        $campaignRecordService = new CampaignRecordService($this->getEm(), $campaignMailService);

        $this->assertInstanceOf(CampaignRecordService::class, $campaignRecordService);

        return $campaignRecordService;
    }

    /**
     * @depends testCreateInstanceOfService
     */
    public function testCreateRecordsForCampaign($campaignRecordService){
        $campaign = $this->createNewCampaigns();

        /** @var $campaignRecordService CampaignRecordService */
        $campaignRecordService->createCampaignRecords($campaign);
        $campaignRecords = $this->getCampaignRecordsWithState($campaign, Constants::CAMPAIGN_RECORD_NEW);

        $this->assertEquals(10, count($campaignRecords));
    }


    /**
     * @depends testCreateInstanceOfService
     */
    public function testCreateRecordsForCampaignAndUnsubscribedState($campaignRecordService){
        $campaign = $this->createNewCampaigns2();

        /** @var $campaignRecordService CampaignRecordService */
        $campaignRecordService->createCampaignRecords($campaign);
        $campaignRecords = $this->getCampaignRecordsWithState($campaign, Constants::CAMPAIGN_RECORD_NEW);

        $this->assertEquals(5, count($campaignRecords));
    }

    /**
     * @depends testCreateInstanceOfService
     * @depends testCreateRecordsForCampaign
     */
    public function testProcessCampaignRecords($campaignRecordService){
        $campaign = $this->createNewCampaigns();
        $campaignRecordService->createCampaignRecords($campaign);

        /** @var $campaignRecordService CampaignRecordService */
        $campaignRecordService->processCampaingRecords($campaign);
        $campaignRecords = $this->getCampaignRecordsWithState($campaign, Constants::CAMPAIGN_RECORD_PROCESS);

        $this->assertEquals(10, count($campaignRecords));
    }
}