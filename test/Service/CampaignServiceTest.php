<?php

namespace Test\Service;

use Doctrine\ORM\EntityManager;
use Zend\Test\PHPUnit\Controller\AbstractConsoleControllerTestCase;
use ZfMetal\EmailCampaigns\Constants;
use ZfMetal\EmailCampaigns\Entity\Campaign;
use ZfMetal\EmailCampaigns\Entity\CampaignState;
use ZfMetal\EmailCampaigns\Entity\DistributionList;
use ZfMetal\EmailCampaigns\Entity\Template;
use ZfMetal\EmailCampaigns\Service\CampaignRecordService;
use ZfMetal\EmailCampaigns\Service\CampaignService;

class CampaignServiceTest extends AbstractConsoleControllerTestCase
{
    public function setUp()
    {
        $this->setApplicationConfig(
            include __DIR__ . '/../config/application.config.php'
        );

        parent::setUp();
        $this->clearData();
    }

    public function tearDown()
    {
        $this->clearData();
        parent::tearDown(); // TODO: Change the autogenerated stub
    }

    /**
     * @return EntityManager
     */
    public function getEm()
    {
        return $this->getApplicationServiceLocator()->get(EntityManager::class);
    }

    /**
     * @return CampaignRepository
     */
    public function getCampaignRepository()
    {
        return $this->getEm()->getRepository(Campaign::class);
    }

    public function clearData()
    {
        $this->getEm()->createQueryBuilder()->delete(Campaign::class, 'c')->getQuery()->execute();
        $this->getEm()->createQueryBuilder()->delete(DistributionList::class, 'c')->getQuery()->execute();
        $this->getEm()->createQueryBuilder()->delete(Template::class, 'c')->getQuery()->execute();
    }

    private function createNewCampaigns()
    {
        $distrubutionList = $this->createDistributionList();

        $template = $this->createTemplate();

        for ($i = 0; $i < 20; $i++) {
            $state = Constants::CAMPAIGN_NEW;
            $id = $i + 1;
            $c = $this->createCampaignWithState($id, $state, $distrubutionList, $template);
            $this->getEm()->persist($c);
        }

        $this->getEm()->flush();
    }

    private function createActivatedCampaign()
    {
        $distrubutionList = $this->createDistributionList();

        $template = $this->createTemplate();

        $state = Constants::CAMPAIGN_ACTIVATED;
        $id = 1;
        $c = $this->createCampaignWithState($id, $state, $distrubutionList, $template);
        $this->getEm()->persist($c);

        $this->getEm()->flush();
    }

    /**
     * @param $id
     * @param $state
     * @param $distrubutionList
     * @param $template
     * @return Campaign
     * @throws \Doctrine\ORM\ORMException
     */
    private function createCampaignWithState($id, $state, $distrubutionList, $template)
    {
        $c = new Campaign();
        $c->setId($id);
        $c->setState($this->getEm()->getReference(CampaignState::class, $state));
        $c->setDistributionList($distrubutionList);
        $c->setTemplate($template);
        $c->setCreateDate(new \DateTime());
        return $c;
    }

    /**
     * @return DistributionList
     * @throws \Doctrine\ORM\ORMException
     * @throws \Doctrine\ORM\OptimisticLockException
     */
    private function createDistributionList()
    {
        $distrubutionList = new DistributionList();
        $distrubutionList->setId(1);
        $distrubutionList->setNameList("Test");
        $distrubutionList->setOriginName('Origin');
        $distrubutionList->setOriginEmail("origin@f.com");

        $this->getEm()->persist($distrubutionList);
        $this->getEm()->flush();
        return $distrubutionList;
    }

    /**
     * @return Template
     * @throws \Doctrine\ORM\ORMException
     * @throws \Doctrine\ORM\OptimisticLockException
     */
    private function createTemplate()
    {
        $template = new Template();
        $template->setId(1);
        $template->setFile('/tmp/file');
        $template->setName('Template');
        $this->getEm()->persist($template);
        $this->getEm()->flush();
        return $template;
    }

    public function testCreateInstanceOfService()
    {
        $campaignRecordService = $this->createMock(CampaignRecordService::class);
        $campaignRecordService->method('processCampaingRecords')->willReturn(true);
        $campaignService = new CampaignService($this->getEm(), $campaignRecordService);

        $this->assertInstanceOf(CampaignService::class, $campaignService);

        return $campaignService;
    }

    /**
     * @depends testCreateInstanceOfService
     */
    public function testActivateCampaigns($campaignService)
    {
        $this->createNewCampaigns();

        $campaigns = $this->getCampaignRepository()->findBy([
            'state' => $this->getEm()->getReference(CampaignState::class, Constants::CAMPAIGN_ACTIVATED)
        ]);
        $this->assertEquals(0, count($campaigns));

        /** @var $campaignService CampaignService */
        $campaignService->activateCampaigns();

        $campaigns = $this->getCampaignRepository()->findBy([
            'state' => $this->getEm()->getReference(CampaignState::class, Constants::CAMPAIGN_ACTIVATED)
        ]);
        $this->assertEquals(10, count($campaigns));
    }

    /**
     * @depends testCreateInstanceOfService
     */
    public function testProcessCampaigns($campaignService)
    {
        /** @var $campaignService CampaignService */
        $this->createActivatedCampaign();
        $campaigns = $this->getCampaignRepository()->findBy([
            'state' => $this->getEm()->getReference(CampaignState::class, Constants::CAMPAIGN_FINISHED)
        ]);
        $this->assertEquals(0, count($campaigns));

        $campaignService->processCampaigns(1);

        $campaigns = $this->getCampaignRepository()->findBy([
            'state' => $this->getEm()->getReference(CampaignState::class, Constants::CAMPAIGN_FINISHED)
        ]);
        $this->assertEquals(1, count($campaigns));
    }

    /**
     * @throws \Doctrine\ORM\ORMException
     */
    public function testProcessCampaignWithStatusFailed(){
        $campaignRecordService = $this->createMock(CampaignRecordService::class);
        $campaignRecordService->method('processCampaingRecords')->willReturn(false);
        $campaignService = new CampaignService($this->getEm(), $campaignRecordService);
        $this->createActivatedCampaign();

        $campaignService->processCampaigns(1);
        $campaigns = $this->getCampaignRepository()->findBy([
            'state' => $this->getEm()->getReference(CampaignState::class, Constants::CAMPAIGN_FAILED)
        ]);

        $this->assertEquals(1, count($campaigns));
    }


}